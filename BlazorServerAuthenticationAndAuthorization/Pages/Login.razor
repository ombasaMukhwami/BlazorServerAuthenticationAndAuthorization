@page "/login"

@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager


<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="@loginRequest.UserName" class="form-control" placeholder="user name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="@loginRequest.Password" type="password" class="form-control" placeholder="password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="@Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    public async Task Authenticate()
    {
        var userAccount = userAccountService.GetUserAccountByUserName(loginRequest.UserName);
        if (userAccount is null || userAccount.Password != loginRequest.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid user name or password");
            return;
        }

        var customAuthenticationStateProvide = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthenticationStateProvide.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);
    }
}
